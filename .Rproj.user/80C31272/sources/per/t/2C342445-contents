---
title: "A guide to using 'ptspotter' v1.0.1"
author: "Rich Leyshon"
date: "`r format(Sys.Date(), '%d %b %Y')`"
output:
  html_document:
    toc: true
    toc_float: true
    theme: united
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
# knitr::opts_knit$set(root.dir = tempdir())
```

## What is 'ptspotter'?

It's a package with helper functions, designed to work well with 'ProjectTemplate'. However, the functions' utility are not limited to use with 'ProjectTemplate'. 'ProjectTemplate' is an excellent package that can be used to organise and efficiently set up more complex workflows. I highly recommend this package. Please check it out on [CRAN](https://CRAN.R-project.org/package=ProjectTemplate) and also the super useful [guide to getting started](http://projecttemplate.net/getting_started.html).

***

## Why 'ptspotter'?

It's a bad joke. Reflecting on the CamelCase syntax for 'ProjectTemplate' and that PT tends to mean Personal Trainer. Who would help a Personal Trainer, maybe a spotter?

***

## 'ptspotter' Functions Overview.

You may find you are spending a disproportionate amount of time manually renumbering R scripts when features are added or removed from your written procedures. `seq_file_ops()` Can be used to quickly create sequentially numbered scripts and `adj_file_nos()` can be used to adjust their numbering.

`memory_report()` and `wrap_up()` are thin wrapper functions that capture some common functions that can be used for debugging procedures. You can use `memory_report()` to monitor memory allocation at select points within your written procedure. `wrap_up()` is used to `stop()` a procedure at any point but has the advantage of using the excellent ['this.path'](https://CRAN.R-project.org/package=this.path) package to help you pinpoint (and remember) which R script you called `wrap_up()` from.

When logging a procedure with ['log4r'](https://cran.r-project.org/web/packages/log4r/index.html), there are a few setup steps to take in getting everything up and running. 'ProjectTemplate' does a great job of making this pain free. However I don't always use 'ProjectTemplate', particularly if a project is smaller and doesn't merit the more formalised approach that 'ProjectTemplate' adheres to. `log_file_ops()` can be used to setup the directory and logfile prerequisites. `log_enable()` will assign the logger and file appender that 'log4r' requires. These 2 functions allow you to quickly get logging any R workflow.

***

## How to get 'ptspotter'.

Installing the stable version from CRAN.

```{r, eval=FALSE}
install.packages("ptspotter")
```

Loading the development version from GitHub.

```{r, eval=FALSE}
devtools::install_github("r-leyshon/ptspotter")
```
***

## Using 'ptspotter' Functions.

Load the package.

```{r, message=FALSE}
library(ptspotter)
```


### File Operations.{.tabset}


#### Create File Sequence

To quickly produce the required number of sequential scripts within a directory of your choice.

```{r}
seq_file_ops(n = 10, target_dir = "munge")
list.files("munge")
```

Note that `seq_file_ops()` creates the directory specified with `target_dir` if it does not already exist.

<br>
![Using `seq_file_ops()` to create 10 files in the "munge" directory](www/seq_file_ops.gif)
<br>

***

#### Incrementing Sequenced Files

At some point in the development process, features may be added to the procedure. This may leave you needing to renumber the scripts. Instead of manually renumbering these scripts, `adj_file_nos()` can do the work for you. In the following example, I need to add 2 more scripts halfway through the sequence.

```{r}

adj_file_nos(target = 5, directory = "munge", step = 2)

list.files("munge")
```

<br>
![Using `adj_file_nos()` to increase part of a file sequence](www/adj_up.gif)
<br>


You can see I now have a gap in my sequence. To fill it, I can rerun the `seq_file_ops()` command run earlier. **But wait, won't that write over my existing scripts?** I hear you ask. Not if you keep the `force = FALSE`, the default value.

```{r}
seq_file_ops(n = 10, target_dir = "munge", force = FALSE)
```

As you can see, `seq_file_ops()` tells you that the pre-existing files in your specified sequence have not been overwritten. 

***

#### Decrementing Sequenced Files

Let's imagine some features were really not such a great idea after all. Let's remove 2 files in the file sequence.

```{r}
unwanted <- paste("munge", c("05-.R", "06-.R"), sep = "//")
file.remove(unwanted)

list.files("munge")
```
We now have a gap in the sequence. To correct this, we can use `adj_file_nos()`, specifying the argument `action = "down"`

```{r}
adj_file_nos(target = 5, directory = "munge", action = "down", step = 2)

list.files("munge")
```

<br>
![Using `adj_file_nos()` to decrease part of a file sequence](www/adj_down.gif)
<br>

***

### Logging with 'log4r'.{.tabset}

Logging is a great idea, particularly for more complex procedures and software that you will be passing on to others. It can be crucial in debugging and monitoring pipelines where the development team are not responsible for execution. 



#### Logging Architecture.

Firstly, you will need to ensure that a folder to store the logfile has been created. The logfile and directory only need to be created once, so please avoid putting this code within your 'ProjectTemplate' munge code.

```{r}
log_file_ops(dir_path = "logs")

list.files("logs")
```

<br>
![Using `log_file_ops()` to set up logging infrastructure](www/log_file_ops.gif)
<br>

#### Logging Environment.

Prior to configuring your R environment ready for logging, please ensure you have followed along in **Logging Architecture**.

Once you have created a logfile, we can start logging output to that location. Use `log_enable()` to quickly create the 'log4r' environment objects required to do this.


```{r}
log_enable(logfile_loc = "logs/logfile.txt")
```

Then you can use any of the 'log4r' functions to log your process.

```{r}
library(log4r)
info(my_logger, "some information")
warn(my_logger, "some warning")
error(my_logger, try(stop("some error")))
```


Checking the content of the logfile.

```{r}
readLines("logs/logfile.txt")
```

<br>
![Using `log_enable()` to create 'log4r' environment dependencies](www/log_enable.gif)
<br>



```{r, include=FALSE}
unlink(c("munge", "logs"), recursive = TRUE)
```





